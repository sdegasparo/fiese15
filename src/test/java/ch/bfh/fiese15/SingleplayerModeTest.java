package ch.bfh.fiese15;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.List;import org.junit.Before;import org.junit.Test;import ch.bfh.fiese15.models.Aufgabenstreifen;import ch.bfh.fiese15.models.Dice;import ch.bfh.fiese15.models.Round;public class SingleplayerModeTest {	private GameMode gameMode;		@Before	public void setUp() {		Round round = new Round(1);		gameMode = new SingleplayerMode(round);		gameMode.init();		gameMode.updatePlayerName("Max");	}	@Test	public void shouldSetName_whenNameGiven() {		assertTrue(gameMode.getCurrentPlayer().getName().equals("Max"));		assertFalse(gameMode.getCurrentPlayer().getName().equals("max"));	}		@Test	public void shouldRoll_whenRollDices() {		gameMode.rollDices();		assertFalse(gameMode.getCurrentPlayer().getDices().get(0).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(1).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(2).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(3).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(4).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(5).getPoints() == 0);	}		@Test	public void shouldResetDices_whenNextRound() {		gameMode.rollDices();		gameMode.nextRound();		assertTrue(gameMode.getCurrentPlayer().getDices().get(0).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(1).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(2).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(3).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(4).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(5).getPoints() == 0);	}		@Test	public void shouldNextRound_whenCurrentRoundLessThanTotal_Round() {		assertTrue(gameMode.allowNextRound()); 		gameMode.onPassButtonPressed(); //Round 2		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 3		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 4		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 5		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 6		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 7		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 8		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 9		assertTrue(gameMode.allowNextRound());		gameMode.onPassButtonPressed(); //Round 10		assertFalse(gameMode.allowNextRound());	}		@Test	public void shouldSetNextAufgabenstreifen_whenPassButtonIsPressed() {		Aufgabenstreifen lastAufgabenstreifen = gameMode.getCurrentAufgabenstreifen();		gameMode.onPassButtonPressed();		assertFalse(lastAufgabenstreifen.equals(gameMode.getCurrentAufgabenstreifen()));			}		@Test	public void shouldAddFiveExtraPoints_whenFiveDicesWasHerausgelegt() {		List<Dice> dices = gameMode.getCurrentPlayer().getDices();		for(Dice dice : dices) {			dice.setPoints(2);			dice.setHerausgelegt(true);		}		dices.get(5).setHerausgelegt(false);				gameMode.getCurrentPlayer().calculateScoreValidRoll();		assertTrue(gameMode.getCurrentPlayer().getScore() == 15);		assertFalse(gameMode.getCurrentPlayer().getScore() == 10);	}		@Test	public void shouldMultiplePointsByTwo_whenSixDicesWasHerausgelegt() {		List<Dice> dices = gameMode.getCurrentPlayer().getDices();		for(Dice dice : dices) {			dice.setPoints(2);			dice.setHerausgelegt(true);		}		gameMode.getCurrentPlayer().calculateScoreValidRoll();		assertTrue(gameMode.getCurrentPlayer().getScore() == 24);		assertFalse(gameMode.getCurrentPlayer().getScore() == 29);		assertFalse(gameMode.getCurrentPlayer().getScore() == 12);		assertFalse(gameMode.getCurrentPlayer().getScore() == 17);	}		@Test	public void shouldCalculatePointsOnAufgabenstreifen_whenInvalidRollOnFirstRoll() {		gameMode.setHasValidRolls(false);		gameMode.onPassButtonPressed();		assertTrue(gameMode.getCurrentPlayer().getScore() == 15);		assertFalse(gameMode.getCurrentPlayer().getScore() == 0);	}		@Test	public void shouldCalculatePointsOnAufgabenstreifen_whenInvalidRoll() {		List<Dice> dices = gameMode.getCurrentPlayer().getDices();		for(Dice dice : dices) {			dice.setPoints(2);			dice.setHerausgelegt(true);		}		dices.get(5).setHerausgelegt(false);		gameMode.setHasValidRolls(false);		gameMode.onPassButtonPressed();		assertFalse(gameMode.getCurrentPlayer().getScore() == 15);		assertFalse(gameMode.getCurrentPlayer().getScore() == 10);	}		@Test	public void shouldCalculatePointsDicesHerausgelegt_whenValidRoll() {		gameMode.getCurrentPlayer().getDices().get(0).setPoints(5);		gameMode.getCurrentPlayer().getDices().get(0).setHerausgelegt(true);		gameMode.setHasValidRolls(true);		gameMode.onPassButtonPressed();		assertTrue(gameMode.getCurrentPlayer().getScore() == 5);		assertFalse(gameMode.getCurrentPlayer().getScore() == 15);	}		@Test	public void shouldResetDiceHerauslegbar_whenRollDices() {		gameMode.getCurrentPlayer().getDices().get(0).setHerauslegbar(true);		gameMode.getCurrentPlayer().rollDices();		assertTrue(gameMode.getCurrentPlayer().getDices().get(0).isHerauslegbar() == false);	}		}