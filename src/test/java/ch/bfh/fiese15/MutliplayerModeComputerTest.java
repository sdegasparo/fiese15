package ch.bfh.fiese15;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertFalse;import static org.junit.Assert.assertTrue;import java.util.List;import org.junit.Before;import org.junit.Test;import ch.bfh.fiese15.models.Computer;import ch.bfh.fiese15.models.Dice;import ch.bfh.fiese15.models.Player;import ch.bfh.fiese15.models.Round;import ch.bfh.fiese15.models.Strategy;import javafx.collections.FXCollections;import javafx.collections.ObservableList;public class MutliplayerModeComputerTest {	private GameMode gameMode;		@Before	public void setUp() {		ObservableList<Player> players = FXCollections.observableArrayList(new Computer("Random", Strategy.Random), new Computer("Greedy", Strategy.Greedy), new Computer("Protective", Strategy.Protective));		Round round = new Round(1);		gameMode = new MultiplayerMode(round, players);		gameMode.init();	}	@Test	public void shouldRoll_whenRollDices() {		gameMode.rollDices();		assertFalse(gameMode.getCurrentPlayer().getDices().get(0).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(1).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(2).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(3).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(4).getPoints() == 0);		assertFalse(gameMode.getCurrentPlayer().getDices().get(5).getPoints() == 0);	}		@Test	public void shouldResetDices_whenNextRound() {		gameMode.rollDices();		gameMode.nextRound();		assertTrue(gameMode.getCurrentPlayer().getDices().get(0).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(1).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(2).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(3).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(4).getPoints() == 0);		assertTrue(gameMode.getCurrentPlayer().getDices().get(5).getPoints() == 0);	}		@Test	public void shouldChangeCurrentPlayer_whenPassButtonIsClicked() {		assertEquals(gameMode.getCurrentPlayer().getName(), Strategy.Random.toString());		gameMode.onPassButtonPressed();		assertEquals(gameMode.getCurrentPlayer().getName(), Strategy.Greedy.toString());		gameMode.onPassButtonPressed();		assertEquals(gameMode.getCurrentPlayer().getName(), Strategy.Protective.toString());	}		@Test	public void shouldIncrementRound_whenAllPlayerPass() {		assertTrue(gameMode.getCurrentRound().getRoundNumber() == 1);		gameMode.onPassButtonPressed();		assertTrue(gameMode.getCurrentRound().getRoundNumber() == 1);		gameMode.onPassButtonPressed();		gameMode.onPassButtonPressed();		assertTrue(gameMode.getCurrentRound().getRoundNumber() == 2);	}	@Test	public void shouldAddFiveExtraPoints_whenFiveDicesWasHerausgelegt() {		List<Dice> dices = gameMode.getCurrentPlayer().getDices();		for(Dice dice : dices) {			dice.setPoints(2);			dice.setHerausgelegt(true);		}		dices.get(5).setHerausgelegt(false);				gameMode.getCurrentPlayer().calculateScoreValidRoll();		assertTrue(gameMode.getCurrentPlayer().getScore() == 15);		assertFalse(gameMode.getCurrentPlayer().getScore() == 10);	}		@Test	public void shouldMultiplePointsByTwo_whenSixDicesWasHerausgelegt() {		List<Dice> dices = gameMode.getCurrentPlayer().getDices();		for(Dice dice : dices) {			dice.setPoints(2);			dice.setHerausgelegt(true);		}		gameMode.getCurrentPlayer().calculateScoreValidRoll();		assertTrue(gameMode.getCurrentPlayer().getScore() == 24);		assertFalse(gameMode.getCurrentPlayer().getScore() == 29);		assertFalse(gameMode.getCurrentPlayer().getScore() == 12);		assertFalse(gameMode.getCurrentPlayer().getScore() == 17);	}		@Test	public void shouldCalculatePointsOnAufgabenstreifen_whenInvalidRollOnFirstRoll() {		gameMode.setHasValidRolls(false);		Player firstPlayer = gameMode.getCurrentPlayer();		gameMode.onPassButtonPressed();		assertTrue(firstPlayer.getScore() == 15);		assertFalse(firstPlayer.getScore() == 0);	}		@Test	public void shouldCalculatePointsOnAufgabenstreifen_whenInvalidRoll() {		List<Dice> dices = gameMode.getCurrentPlayer().getDices();		for(Dice dice : dices) {			dice.setPoints(2);			dice.setHerausgelegt(true);		}		dices.get(5).setHerausgelegt(false);		gameMode.setHasValidRolls(false);		gameMode.onPassButtonPressed();		assertFalse(gameMode.getCurrentPlayer().getScore() == 15);		assertFalse(gameMode.getCurrentPlayer().getScore() == 10);	}		@Test	public void shouldCalculatePointsDicesHerausgelegt_whenValidRoll() {		gameMode.getCurrentPlayer().getDices().get(0).setPoints(5);		gameMode.getCurrentPlayer().getDices().get(0).setHerausgelegt(true);		gameMode.setHasValidRolls(true);		Player firstPlayer = gameMode.getCurrentPlayer();		gameMode.onPassButtonPressed();		assertTrue(firstPlayer.getScore() == 5);		assertFalse(firstPlayer.getScore() == 15);	}		@Test	public void shouldResetDiceHerauslegbar_whenRollDices() {		gameMode.getCurrentPlayer().getDices().get(0).setHerauslegbar(true);		gameMode.getCurrentPlayer().rollDices();		assertTrue(gameMode.getCurrentPlayer().getDices().get(0).isHerauslegbar() == false);	}		// @Test	public void shouldDicesHerauslegen_whenComputerRandom() {		assertEquals(gameMode.getCurrentPlayer().getName(), Strategy.Random.toString());		Player random = gameMode.getCurrentPlayer();				((Computer) gameMode.getCurrentPlayer()).play((MultiplayerMode) gameMode);		int count = 0;		for(Dice dice : random.getDices()) {			if(dice.isHerausgelegt()) {				count++;			}		}		assertTrue(count > 0);		assertTrue(random.getScore() > 0);	}		// @Test	public void shouldDicesHerauslegen_whenComputerGreedy() {		gameMode.onPassButtonPressed();		assertEquals(gameMode.getCurrentPlayer().getName(), Strategy.Greedy.toString());		Player greedy = gameMode.getCurrentPlayer();				((Computer) gameMode.getCurrentPlayer()).play((MultiplayerMode) gameMode);		int count = 0;		for(Dice dice : greedy.getDices()) {			if(dice.isHerausgelegt()) {				count++;			}		}		assertTrue(count > 0);		assertTrue(greedy.getScore() > 0);	}		// @Test	public void shouldDicesHerauslegen_whenComputerProtective() {		gameMode.onPassButtonPressed();		gameMode.onPassButtonPressed();		assertEquals(gameMode.getCurrentPlayer().getName(), Strategy.Protective.toString());		Player protective = gameMode.getCurrentPlayer();				((Computer) gameMode.getCurrentPlayer()).play((MultiplayerMode) gameMode);		int count = 0;		for(Dice dice : protective.getDices()) {			if(dice.isHerausgelegt()) {				count++;			}		}		assertTrue(count > 0);		assertTrue(protective.getScore() > 0);	}}